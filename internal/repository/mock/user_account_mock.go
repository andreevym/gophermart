// Code generated by MockGen. DO NOT EDIT.
// Source: user_account.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/andreevym/gofermart/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockUserAccountRepository is a mock of UserAccountRepository interface.
type MockUserAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccountRepositoryMockRecorder
}

// MockUserAccountRepositoryMockRecorder is the mock recorder for MockUserAccountRepository.
type MockUserAccountRepositoryMockRecorder struct {
	mock *MockUserAccountRepository
}

// NewMockUserAccountRepository creates a new mock instance.
func NewMockUserAccountRepository(ctrl *gomock.Controller) *MockUserAccountRepository {
	mock := &MockUserAccountRepository{ctrl: ctrl}
	mock.recorder = &MockUserAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccountRepository) EXPECT() *MockUserAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateUserAccount mocks base method.
func (m *MockUserAccountRepository) CreateUserAccount(ctx context.Context, user *repository.UserAccount) (*repository.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", ctx, user)
	ret0, _ := ret[0].(*repository.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockUserAccountRepositoryMockRecorder) CreateUserAccount(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockUserAccountRepository)(nil).CreateUserAccount), ctx, user)
}

// DeleteUserAccount mocks base method.
func (m *MockUserAccountRepository) DeleteUserAccount(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAccount", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAccount indicates an expected call of DeleteUserAccount.
func (mr *MockUserAccountRepositoryMockRecorder) DeleteUserAccount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAccount", reflect.TypeOf((*MockUserAccountRepository)(nil).DeleteUserAccount), ctx, userID)
}

// GetUserAccountByUserID mocks base method.
func (m *MockUserAccountRepository) GetUserAccountByUserID(ctx context.Context, userID int64) (*repository.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByUserID", ctx, userID)
	ret0, _ := ret[0].(*repository.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByUserID indicates an expected call of GetUserAccountByUserID.
func (mr *MockUserAccountRepositoryMockRecorder) GetUserAccountByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByUserID", reflect.TypeOf((*MockUserAccountRepository)(nil).GetUserAccountByUserID), ctx, userID)
}

// UpdateUserAccount mocks base method.
func (m *MockUserAccountRepository) UpdateUserAccount(ctx context.Context, user *repository.UserAccount) (*repository.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAccount", ctx, user)
	ret0, _ := ret[0].(*repository.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAccount indicates an expected call of UpdateUserAccount.
func (mr *MockUserAccountRepositoryMockRecorder) UpdateUserAccount(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAccount", reflect.TypeOf((*MockUserAccountRepository)(nil).UpdateUserAccount), ctx, user)
}
